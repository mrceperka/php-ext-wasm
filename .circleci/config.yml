version: 2.1

# List of all jobs.
jobs:
  # Build and test the project the project.
  build_and_test:
    docker:
      - image: circleci/php:latest
    steps:
      # Update the project.
      - checkout

      # Install Rust.
      - run:
          name: Install Rust
          command: |
            test -d /usr/local/cargo || curl https://sh.rustup.rs -sSf | sh -s -- -y

      # Install `just` used to manage the project.
      - run:
          name: Install just
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            test -f $HOME/.cargo/bin/just || cargo install just

      # Install Composer.
      - run:
          name: Install Composer
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
            mv composer.phar composer

      # Compile the Rust part of the extension.
      - run:
          name: Compile the Rust part of the PHP extension
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            just rust

      # Compile and install the PHP extension.
      # `just php` isn't used because there is no some issue with
      # `--with-pic` I don't understandâ€¦
      - run:
          name: Compile and install the PHP extension
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            sudo apt-get install gcc
            export CXX="gcc"
            EXTENSION="$HOME/project/extension"
            cd $EXTENSION
            test -f libwasmer_runtime_c_api.a && rm libwasmer_runtime_c_api.a
            ln -s ../target/release/deps/libwasmer_runtime_c_api-*.a libwasmer_runtime_c_api.a
            PHP_PREFIX=$(php-config --prefix)
            PHP_PREFIX_BIN=$PHP_PREFIX/bin
            $PHP_PREFIX_BIN/phpize --clean
            $PHP_PREFIX_BIN/phpize
            ./configure --with-php-config=$PHP_PREFIX_BIN/php-config
            /bin/bash $EXTENSION/libtool --mode=compile $CXX -I. -I$EXTENSION -DPHP_ATOM_INC -I$EXTENSION/include -I$EXTENSION/main -I$EXTENSION -I$PHP_PREFIX/include/php -I$PHP_PREFIX/include/php/main -I$PHP_PREFIX/include/php/TSRM -I$PHP_PREFIX/include/php/Zend -I$PHP_PREFIX/include/php/ext -I$PHP_PREFIX/include/php/ext/date/lib -DHAVE_CONFIG_H -c $EXTENSION/wasm.cc -o wasm.lo -fPIC
            $CXX -I. -I$EXTENSION -DPHP_ATOM_INC -I$EXTENSION/include -I$EXTENSION/main -I$EXTENSION -I$PHP_PREFIX/include/php -I$PHP_PREFIX/include/php/main -I$PHP_PREFIX/include/php/TSRM -I$PHP_PREFIX/include/php/Zend -I$PHP_PREFIX/include/php/ext -I$PHP_PREFIX/include/php/ext/date/lib -DHAVE_CONFIG_H -c $EXTENSION/wasm.cc  -DPIC -o .libs/wasm.o -fPIC
            /bin/bash $EXTENSION/libtool --mode=link cc -DPHP_ATOM_INC -I$EXTENSION/include -I$EXTENSION/main -I$EXTENSION -I$PHP_PREFIX/include/php -I$PHP_PREFIX/include/php/main -I$PHP_PREFIX/include/php/TSRM -I$PHP_PREFIX/include/php/Zend -I$PHP_PREFIX/include/php/ext -I$PHP_PREFIX/include/php/ext/date/lib  -DHAVE_CONFIG_H  -g -O2    -o wasm.la -export-dynamic -avoid-version -prefer-pic -module -rpath $EXTENSION/modules  wasm.lo -Wl,-rpath,$EXTENSION/. -L$EXTENSION/. -lwasmer_runtime_c_api -fPIC
            cc -shared  .libs/wasm.o  -L$EXTENSION/. -lwasmer_runtime_c_api  -Wl,-rpath -Wl,$EXTENSION/. -Wl,-soname -Wl,wasm.so -o .libs/wasm.so -fPIC
            sudo make install-modules

      # Run the extension test suites.
      - run:
          name: Test the extension
          command: |
            export PATH="$HOME/.cargo/bin:$PATH"
            composer install --no-progress
            vendor/bin/atoum --php 'php -d extension=wasm' --directories tests/units --force-terminal --use-dot-report


# List of workflows.
workflows:
  version: 2

  # The build workflow.
  build:
    jobs:
      # Run the `build_and_test` job for all branches and all tags.
      - build_and_test:
          filters:
            branches:
              only:
                - trying
                - staging
            tags:
              only: /.*/
